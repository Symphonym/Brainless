uniform sampler2D image;
uniform float enableDarkness;
uniform float lightReachDistance;
uniform vec2 lightPos;

void main() {
	vec4 texel = texture2D(image, gl_TexCoord[0].xy).rgba;
	gl_FragColor = gl_Color * texel; // Get normal pixel color
	//gl_FragColor.rgb *= 0.4f;

	vec3 baseDarkness = gl_FragColor.rgb * 0.09;
	if(enableDarkness > 0.5)
	{
		vec2 distanceVector = gl_FragCoord - lightPos;
		float distanceToTarget = sqrt(distanceVector.x*distanceVector.x + distanceVector.y*distanceVector.y);

		
		if(distanceToTarget > lightReachDistance)
		{
			float distRelation = lightReachDistance / distanceToTarget;
			gl_FragColor.rgb = baseDarkness;
			//gl_FragColor.rgb *= distRelation;
			
			if(gl_FragColor.r < baseDarkness.r || gl_FragColor.g < baseDarkness.g || gl_FragColor.b < baseDarkness.b)
			{
				gl_FragColor.rgb = baseDarkness;
			}
		}
		else
		{
			float distRelation = distanceToTarget / lightReachDistance;
			vec3 multiplier = vec3(1) - vec3(distRelation, distRelation, distRelation);
			gl_FragColor.rgb = baseDarkness + (gl_FragColor.rgb - baseDarkness) * (1-distRelation); //(gl_FragColor.rgb * 0.09) + multiplier;

			//gl_FragColor.rgb += vec3(distRelation, distRelation, distRelation);
			//gl_FragColor.rgb *= sin(distanceToPlayer) + cos(distanceToPlayer);
			//gl_FragColor.a *= 1.f - 1.f*distRelation;
		}
	}
	else
	{
		gl_FragColor.rgb = baseDarkness;
	}


}