uniform sampler2D image;
uniform float enableDarkness;
uniform float enableLightSource;
uniform float lightReachDistance;
uniform float intensityValue;
uniform vec2 lightPos;

void main() {
	vec4 texel = texture2D(image, gl_TexCoord[0].xy).rgba;
	gl_FragColor = gl_Color * texel; // Get normal pixel color
	//gl_FragColor.rgb *= 0.4f;


	// SEPIA CODE
	vec3 tmpSepia = vec3(0,0,0);
	tmpSepia.r = dot(texel, vec3(.393, .769, .189));
	tmpSepia.g = dot(texel, vec3(.349, .686, .168));
	tmpSepia.b = dot(texel, vec3(.272, .534, .131));  

	tmpSepia.rgb = tmpSepia.rgb / 3.f;
	
	gl_FragColor.r = mix(gl_FragColor.r, tmpSepia.r, intensityValue);
	gl_FragColor.g = mix(gl_FragColor.g, tmpSepia.g, intensityValue);
	gl_FragColor.b = mix(gl_FragColor.b, tmpSepia.b, intensityValue);

	// Darkness code
	vec3 baseDarkness = gl_FragColor.rgb * 0.09;
	if(enableDarkness > 0.5)
	{

		if(enableLightSource > 0.5)
		{
			vec2 distanceVector = gl_FragCoord - lightPos;
			float distanceToTarget = sqrt(distanceVector.x*distanceVector.x + distanceVector.y*distanceVector.y);

		
			if(distanceToTarget > lightReachDistance)
			{
				float distRelation = lightReachDistance / distanceToTarget;
				gl_FragColor.rgb = baseDarkness;
				//gl_FragColor.rgb *= distRelation;
			
				if(gl_FragColor.r < baseDarkness.r || gl_FragColor.g < baseDarkness.g || gl_FragColor.b < baseDarkness.b)
				{
					gl_FragColor.rgb = baseDarkness;
				}
			}
			else
			{
				float distRelation = distanceToTarget / lightReachDistance;
				vec3 multiplier = vec3(1) - vec3(distRelation, distRelation, distRelation);
				gl_FragColor.rgb = baseDarkness + (gl_FragColor.rgb - baseDarkness) * (1-distRelation); //(gl_FragColor.rgb * 0.09) + multiplier;

				//gl_FragColor.rgb += vec3(distRelation, distRelation, distRelation);
				//gl_FragColor.rgb *= sin(distanceToPlayer) + cos(distanceToPlayer);
				//gl_FragColor.a *= 1.f - 1.f*distRelation;
			}
		}
		else
		{
			gl_FragColor.rgb = baseDarkness;
		}
	}


}